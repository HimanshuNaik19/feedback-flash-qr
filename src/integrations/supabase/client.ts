
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// For development/demo purposes using offline mode
// No actual Supabase connection will be established
const SUPABASE_URL = "https://vkumqdntyecpmilulynm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZrdW1xZG50eWVjcG1pbHVseW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNzI5OTQsImV4cCI6MjA2MTc0ODk5NH0.MNWUhEx_TLoKU5tTzBg52W6M3nd4JR-QLFs6ECpvZ3U";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Creating the client but all operations will use localStorage instead
console.log('OFFLINE DEMO MODE: Using localStorage instead of Supabase');
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Override the Supabase methods with non-operational versions to prevent actual API calls
const originalFrom = supabase.from.bind(supabase);
supabase.from = (table) => {
  console.log(`OFFLINE MODE: Attempted to access Supabase table "${table}"`);
  return {
    select: () => ({ data: [], error: null }),
    insert: () => ({ data: [], error: null }),
    update: () => ({ data: null, error: null }),
    delete: () => ({ data: null, error: null }),
    upsert: () => ({ data: null, error: null }),
  } as any;
};
